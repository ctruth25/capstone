{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p style=\"text-align:center\">\n",
    "    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDS0321ENSkillsNetwork26802033-2022-01-01\" target=\"_blank\">\n",
    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\"  />\n",
    "    </a>\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **SpaceX  Falcon 9 First Stage Landing Prediction**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Assignment: Exploring and Preparing Data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Estimated time needed: **70** minutes\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this assignment, we will predict if the Falcon 9 first stage will land successfully. SpaceX advertises Falcon 9 rocket launches on its website with a cost of 62 million dollars; other providers cost upward of 165 million dollars each, much of the savings is due to the fact that SpaceX can reuse the first stage.\n",
    "\n",
    "In this lab, you will perform Exploratory Data Analysis and Feature Engineering.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Falcon 9 first stage will land successfully\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/Images/landing\\_1.gif)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Several examples of an unsuccessful landing are shown here:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/Images/crash.gif)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most unsuccessful landings are planned. Space X performs a controlled landing in the oceans.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Objectives\n",
    "\n",
    "Perform exploratory Data Analysis and Feature Engineering using `Pandas` and `Matplotlib`\n",
    "\n",
    "*   Exploratory Data Analysis\n",
    "*   Preparing Data  Feature Engineering\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import Libraries and Define Auxiliary Functions\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will import the following libraries the lab\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# andas is a software library written for the Python programming language for data manipulation and analysis.\n",
    "import pandas as pd\n",
    "#NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays\n",
    "import numpy as np\n",
    "# Matplotlib is a plotting library for python and pyplot gives us a MatLab like plotting framework. We will use this in our plotter function to plot data.\n",
    "import matplotlib.pyplot as plt\n",
    "#Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploratory Data Analysis\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's read the SpaceX dataset into a Pandas dataframe and print its summary\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FlightNumber</th>\n",
       "      <th>Date</th>\n",
       "      <th>BoosterVersion</th>\n",
       "      <th>PayloadMass</th>\n",
       "      <th>Orbit</th>\n",
       "      <th>LaunchSite</th>\n",
       "      <th>Outcome</th>\n",
       "      <th>Flights</th>\n",
       "      <th>GridFins</th>\n",
       "      <th>Reused</th>\n",
       "      <th>Legs</th>\n",
       "      <th>LandingPad</th>\n",
       "      <th>Block</th>\n",
       "      <th>ReusedCount</th>\n",
       "      <th>Serial</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2010-06-04</td>\n",
       "      <td>Falcon 9</td>\n",
       "      <td>6104.959412</td>\n",
       "      <td>LEO</td>\n",
       "      <td>CCAFS SLC 40</td>\n",
       "      <td>None None</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B0003</td>\n",
       "      <td>-80.577366</td>\n",
       "      <td>28.561857</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2012-05-22</td>\n",
       "      <td>Falcon 9</td>\n",
       "      <td>525.000000</td>\n",
       "      <td>LEO</td>\n",
       "      <td>CCAFS SLC 40</td>\n",
       "      <td>None None</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B0005</td>\n",
       "      <td>-80.577366</td>\n",
       "      <td>28.561857</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2013-03-01</td>\n",
       "      <td>Falcon 9</td>\n",
       "      <td>677.000000</td>\n",
       "      <td>ISS</td>\n",
       "      <td>CCAFS SLC 40</td>\n",
       "      <td>None None</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B0007</td>\n",
       "      <td>-80.577366</td>\n",
       "      <td>28.561857</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2013-09-29</td>\n",
       "      <td>Falcon 9</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>PO</td>\n",
       "      <td>VAFB SLC 4E</td>\n",
       "      <td>False Ocean</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B1003</td>\n",
       "      <td>-120.610829</td>\n",
       "      <td>34.632093</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2013-12-03</td>\n",
       "      <td>Falcon 9</td>\n",
       "      <td>3170.000000</td>\n",
       "      <td>GTO</td>\n",
       "      <td>CCAFS SLC 40</td>\n",
       "      <td>None None</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B1004</td>\n",
       "      <td>-80.577366</td>\n",
       "      <td>28.561857</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FlightNumber        Date BoosterVersion  PayloadMass Orbit    LaunchSite  \\\n",
       "0             1  2010-06-04       Falcon 9  6104.959412   LEO  CCAFS SLC 40   \n",
       "1             2  2012-05-22       Falcon 9   525.000000   LEO  CCAFS SLC 40   \n",
       "2             3  2013-03-01       Falcon 9   677.000000   ISS  CCAFS SLC 40   \n",
       "3             4  2013-09-29       Falcon 9   500.000000    PO   VAFB SLC 4E   \n",
       "4             5  2013-12-03       Falcon 9  3170.000000   GTO  CCAFS SLC 40   \n",
       "\n",
       "       Outcome  Flights  GridFins  Reused   Legs LandingPad  Block  \\\n",
       "0    None None        1     False   False  False        NaN    1.0   \n",
       "1    None None        1     False   False  False        NaN    1.0   \n",
       "2    None None        1     False   False  False        NaN    1.0   \n",
       "3  False Ocean        1     False   False  False        NaN    1.0   \n",
       "4    None None        1     False   False  False        NaN    1.0   \n",
       "\n",
       "   ReusedCount Serial   Longitude   Latitude  Class  \n",
       "0            0  B0003  -80.577366  28.561857      0  \n",
       "1            0  B0005  -80.577366  28.561857      0  \n",
       "2            0  B0007  -80.577366  28.561857      0  \n",
       "3            0  B1003 -120.610829  34.632093      0  \n",
       "4            0  B1004  -80.577366  28.561857      0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv\")\n",
    "\n",
    "# If you were unable to complete the previous lab correctly you can uncomment and load this csv\n",
    "\n",
    "# df = pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DS0701EN-SkillsNetwork/api/dataset_part_2.csv')\n",
    "\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's try to see how the `FlightNumber` (indicating the continuous launch attempts.) and `Payload` variables would affect the launch outcome.\n",
    "\n",
    "We can plot out the <code>FlightNumber</code> vs. <code>PayloadMass</code>and overlay the outcome of the launch. We see that as the flight number increases, the first stage is more likely to land successfully. The payload mass is also important; it seems the more massive the payload, the less likely the first stage will return.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1842.38x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(y=\"PayloadMass\", x=\"FlightNumber\", hue=\"Class\", data=df, aspect = 5)\n",
    "plt.xlabel(\"Flight Number\",fontsize=20)\n",
    "plt.ylabel(\"Pay load Mass (kg)\",fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that different launch sites have different success rates.  <code>CCAFS LC-40</code>, has a success rate of 60 %, while  <code>KSC LC-39A</code> and <code>VAFB SLC 4E</code> has a success rate of 77%.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, let's drill down to each site visualize its detailed launch records.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TASK 1: Visualize the relationship between Flight Number and Launch Site\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the function <code>catplot</code> to plot <code>FlightNumber</code> vs <code>LaunchSite</code>, set the  parameter <code>x</code>  parameter to <code>FlightNumber</code>,set the  <code>y</code> to <code>Launch Site</code> and set the parameter <code>hue</code> to <code>'class'</code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 762.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a scatter point chart with x axis to be Flight Number and y axis to be the launch site, and hue to be the class value\n",
    "sns.catplot(y='LaunchSite',x='FlightNumber',hue='Class',data=df, aspect=2)\n",
    "plt.xlabel(\"Flight Number\",fontsize=20)\n",
    "plt.ylabel(\"Launch site\", fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now try to explain the patterns you found in the Flight Number vs. Launch Site scatter point plots.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TASK 2: Visualize the relationship between Payload and Launch Site\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also want to observe if there is any relationship between launch sites and their payload mass.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a scatter point chart with x axis to be Pay Load Mass (kg) and y axis to be the launch site, and hue to be the class value\n",
    "sns.scatterplot(x='PayloadMass',y='LaunchSite', hue='Class', data=df)\n",
    "plt.xlabel(\"Payload Mass kg\", fontsize=20)\n",
    "plt.ylabel(\"Launch Site\", fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now if you observe Payload Vs. Launch Site scatter point chart you will find for the VAFB-SLC  launchsite there are no  rockets  launched for  heavypayload mass(greater than 10000).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TASK  3: Visualize the relationship between success rate of each orbit type\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we want to visually check if there are any relationship between success rate and orbit type.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's create a `bar chart` for the sucess rate of each orbit\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_68/3349956348.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcatplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbar1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbar1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'bar'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maspect\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Orbit\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Success rate of each orbit\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mcatplot\u001b[0;34m(x, y, hue, data, row, col, col_wrap, estimator, ci, n_boot, units, order, hue_order, row_order, col_order, kind, height, aspect, orient, color, palette, legend, legend_out, sharex, sharey, margin_titles, facet_kws, **kwargs)\u001b[0m\n\u001b[1;32m   3753\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3754\u001b[0m     \u001b[0;31m# Draw the plot onto the facets\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3755\u001b[0;31m     \u001b[0mg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap_dataframe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplot_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mplot_kws\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3756\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3757\u001b[0m     \u001b[0;31m# Special case axis labels for a count type plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36mmap_dataframe\u001b[0;34m(self, func, *args, **kwargs)\u001b[0m\n\u001b[1;32m    821\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    822\u001b[0m         \u001b[0;31m# Finalize the annotations and layout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 823\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_finalize_grid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    824\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    825\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36m_finalize_grid\u001b[0;34m(self, axlabels)\u001b[0m\n\u001b[1;32m    844\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_finalize_grid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    845\u001b[0m         \u001b[0;34m\"\"\"Finalize the annotations and layout.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 846\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_axis_labels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0maxlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    847\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_titles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    848\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtight_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36mset_axis_labels\u001b[0;34m(self, x_var, y_var)\u001b[0m\n\u001b[1;32m    870\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx_var\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    871\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_x_var\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx_var\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 872\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_var\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    873\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my_var\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    874\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_y_var\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_var\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36mset_xlabels\u001b[0;34m(self, label, **kwargs)\u001b[0m\n\u001b[1;32m    881\u001b[0m             \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_x_var\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    882\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0max\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bottom_axes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 883\u001b[0;31m             \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_xlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    884\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    885\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mset_xlabel\u001b[0;34m(self, xlabel, fontdict, labelpad, loc, **kwargs)\u001b[0m\n\u001b[1;32m   3511\u001b[0m                 \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhorizontalalignment\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'right'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3512\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3513\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxaxis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_label_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontdict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3514\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3515\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minvert_xaxis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mset_label_text\u001b[0;34m(self, label, fontdict, **kwargs)\u001b[0m\n\u001b[1;32m   1558\u001b[0m         \"\"\"\n\u001b[1;32m   1559\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misDefault_label\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1560\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1561\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfontdict\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1562\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfontdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/matplotlib/text.py\u001b[0m in \u001b[0;36mset_text\u001b[0;34m(self, s)\u001b[0m\n\u001b[1;32m   1221\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1222\u001b[0m             \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m''\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1223\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_text\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1224\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1225\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstale\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# HINT use groupby method on Orbit column and get the mean of Class column\n",
    "bar1=df.groupby(\"Orbit\")[\"Class\"].mean()\n",
    "bar1\n",
    "\n",
    "\n",
    "sns.catplot(x=bar1.index,y=bar1.values, data=df, kind='bar', aspect=3)\n",
    "plt.xlabel(\"Orbit\",fontsize=15)\n",
    "plt.ylabel(\"Success rate of each orbit\", fontsize=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyze the ploted bar chart try to find which orbits have high sucess rate.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TASK  4: Visualize the relationship between FlightNumber and Orbit type\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each orbit, we want to see if there is any relationship between FlightNumber and Orbit type.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 762.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a scatter point chart with x axis to be FlightNumber and y axis to be the Orbit, and hue to be the class value\n",
    "sns.catplot(x=\"FlightNumber\",y=\"Orbit\",hue='Class' ,data=df,aspect=2)\n",
    "plt.xlabel(\"Flight Number\", fontsize=15)\n",
    "plt.ylabel(\"Orbit\", fontsize=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You should see that in the LEO orbit the Success appears related to the number of flights; on the other hand, there seems to be no relationship between flight number when in GTO orbit.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TASK  5: Visualize the relationship between Payload and Orbit type\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, we can plot the Payload vs. Orbit scatter point charts to reveal the relationship between Payload and Orbit type\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 762.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a scatter point chart with x axis to be Payload and y axis to be the Orbit, and hue to be the class value\n",
    "sns.catplot(x=\"PayloadMass\",y=\"Orbit\",hue='Class' ,data=df,aspect=2)\n",
    "plt.xlabel(\"Payload mass\", fontsize=15)\n",
    "plt.ylabel(\"Orbit\", fontsize=15)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With heavy payloads the successful landing or positive landing rate are more for Polar,LEO and ISS.\n",
    "\n",
    "However for GTO we cannot distinguish this well as both positive landing rate and negative landing(unsuccessful mission) are both there here.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TASK  6: Visualize the launch success yearly trend\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can plot a line chart with x axis to be <code>Year</code> and y axis to be average success rate, to get the average launch success trend.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The function will help you get the year from the date:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A function to Extract years from the date \n",
    "year=[]\n",
    "def Extract_year(date):\n",
    "    for i in df[\"Date\"]:\n",
    "        year.append(i.split(\"-\")[0])\n",
    "    return year\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Data must be 1-dimensional",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_68/1840738099.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Plot a line chart with x axis to be the extracted year and y axis to be the success rate\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0myear\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Class'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/seaborn/relational.py\u001b[0m in \u001b[0;36mrelplot\u001b[0;34m(x, y, hue, size, style, data, row, col, col_wrap, row_order, col_order, palette, hue_order, hue_norm, sizes, size_order, size_norm, markers, dashes, style_order, legend, kind, height, aspect, facet_kws, **kwargs)\u001b[0m\n\u001b[1;32m   1574\u001b[0m         \u001b[0msizes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msizes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize_order\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msize_order\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize_norm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msize_norm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1575\u001b[0m         \u001b[0mmarkers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmarkers\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdashes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdashes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstyle_order\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstyle_order\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1576\u001b[0;31m         \u001b[0mlegend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1577\u001b[0m     )\n\u001b[1;32m   1578\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/seaborn/relational.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, hue, size, style, data, palette, hue_order, hue_norm, sizes, size_order, size_norm, dashes, markers, style_order, x_bins, y_bins, units, estimator, ci, n_boot, alpha, x_jitter, y_jitter, legend)\u001b[0m\n\u001b[1;32m    850\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    851\u001b[0m         plot_data = self.establish_variables(\n\u001b[0;32m--> 852\u001b[0;31m             \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstyle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    853\u001b[0m         )\n\u001b[1;32m    854\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/seaborn/relational.py\u001b[0m in \u001b[0;36mestablish_variables\u001b[0;34m(self, x, y, hue, size, style, units, data)\u001b[0m\n\u001b[1;32m    155\u001b[0m                 \u001b[0munits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0munits\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    156\u001b[0m             )\n\u001b[0;32m--> 157\u001b[0;31m             \u001b[0mplot_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplot_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    158\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m         \u001b[0;31m# Option 3:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    612\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    613\u001b[0m             \u001b[0;31m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 614\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    615\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    616\u001b[0m             \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmrecords\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mdict_to_mgr\u001b[0;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[1;32m    463\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    464\u001b[0m     return arrays_to_mgr(\n\u001b[0;32m--> 465\u001b[0;31m         \u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_names\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtyp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    466\u001b[0m     )\n\u001b[1;32m    467\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, arr_names, index, columns, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[1;32m    122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0;31m# don't force copy because getting jammed in an ndarray anyway\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 124\u001b[0;31m         \u001b[0marrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_homogenize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    125\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    126\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_homogenize\u001b[0;34m(data, index, dtype)\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    589\u001b[0m             val = sanitize_array(\n\u001b[0;32m--> 590\u001b[0;31m                 \u001b[0mval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_cast_failure\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    591\u001b[0m             )\n\u001b[1;32m    592\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/pandas/core/construction.py\u001b[0m in \u001b[0;36msanitize_array\u001b[0;34m(data, index, dtype, copy, raise_cast_failure, allow_2d)\u001b[0m\n\u001b[1;32m    574\u001b[0m                 \u001b[0msubarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_infer_to_datetimelike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    575\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 576\u001b[0;31m     \u001b[0msubarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_sanitize_ndim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mallow_2d\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    577\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    578\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/conda/envs/python/lib/python3.7/site-packages/pandas/core/construction.py\u001b[0m in \u001b[0;36m_sanitize_ndim\u001b[0;34m(result, data, dtype, index, allow_2d)\u001b[0m\n\u001b[1;32m    625\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mallow_2d\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    626\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 627\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Data must be 1-dimensional\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    628\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mExtensionDtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    629\u001b[0m             \u001b[0;31m# i.e. PandasDtype(\"O\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Data must be 1-dimensional"
     ]
    }
   ],
   "source": [
    "# Plot a line chart with x axis to be the extracted year and y axis to be the success rate\n",
    "\n",
    "sns.relplot(x=year,y='Class', data=df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "you can observe that the sucess rate since 2013 kept increasing till 2020\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Features Engineering\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By now, you should obtain some preliminary insights about how each important variable would affect the success rate, we will select the features that will be used in success prediction in the future module.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FlightNumber</th>\n",
       "      <th>PayloadMass</th>\n",
       "      <th>Orbit</th>\n",
       "      <th>LaunchSite</th>\n",
       "      <th>Flights</th>\n",
       "      <th>GridFins</th>\n",
       "      <th>Reused</th>\n",
       "      <th>Legs</th>\n",
       "      <th>LandingPad</th>\n",
       "      <th>Block</th>\n",
       "      <th>ReusedCount</th>\n",
       "      <th>Serial</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>6104.959412</td>\n",
       "      <td>LEO</td>\n",
       "      <td>CCAFS SLC 40</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B0003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>525.000000</td>\n",
       "      <td>LEO</td>\n",
       "      <td>CCAFS SLC 40</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B0005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>677.000000</td>\n",
       "      <td>ISS</td>\n",
       "      <td>CCAFS SLC 40</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B0007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>PO</td>\n",
       "      <td>VAFB SLC 4E</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B1003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3170.000000</td>\n",
       "      <td>GTO</td>\n",
       "      <td>CCAFS SLC 40</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>B1004</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   FlightNumber  PayloadMass Orbit    LaunchSite  Flights  GridFins  Reused  \\\n",
       "0             1  6104.959412   LEO  CCAFS SLC 40        1     False   False   \n",
       "1             2   525.000000   LEO  CCAFS SLC 40        1     False   False   \n",
       "2             3   677.000000   ISS  CCAFS SLC 40        1     False   False   \n",
       "3             4   500.000000    PO   VAFB SLC 4E        1     False   False   \n",
       "4             5  3170.000000   GTO  CCAFS SLC 40        1     False   False   \n",
       "\n",
       "    Legs LandingPad  Block  ReusedCount Serial  \n",
       "0  False        NaN    1.0            0  B0003  \n",
       "1  False        NaN    1.0            0  B0005  \n",
       "2  False        NaN    1.0            0  B0007  \n",
       "3  False        NaN    1.0            0  B1003  \n",
       "4  False        NaN    1.0            0  B1004  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features = df[['FlightNumber', 'PayloadMass', 'Orbit', 'LaunchSite', 'Flights', 'GridFins', 'Reused', 'Legs', 'LandingPad', 'Block', 'ReusedCount', 'Serial']]\n",
    "features.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TASK  7: Create dummy variables to categorical columns\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the function <code>get_dummies</code> and <code>features</code> dataframe to apply OneHotEncoder to the column <code>Orbits</code>, <code>LaunchSite</code>, <code>LandingPad</code>, and <code>Serial</code>. Assign the value to the variable <code>features_one_hot</code>, display the results using the method head. Your result dataframe must include all features including the encoded ones.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FlightNumber</th>\n",
       "      <th>PayloadMass</th>\n",
       "      <th>Flights</th>\n",
       "      <th>GridFins</th>\n",
       "      <th>Reused</th>\n",
       "      <th>Legs</th>\n",
       "      <th>Block</th>\n",
       "      <th>ReusedCount</th>\n",
       "      <th>Orbit_ES-L1</th>\n",
       "      <th>Orbit_GEO</th>\n",
       "      <th>...</th>\n",
       "      <th>Serial_B1048</th>\n",
       "      <th>Serial_B1049</th>\n",
       "      <th>Serial_B1050</th>\n",
       "      <th>Serial_B1051</th>\n",
       "      <th>Serial_B1054</th>\n",
       "      <th>Serial_B1056</th>\n",
       "      <th>Serial_B1058</th>\n",
       "      <th>Serial_B1059</th>\n",
       "      <th>Serial_B1060</th>\n",
       "      <th>Serial_B1062</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>6104.959412</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>525.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>677.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3170.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85</th>\n",
       "      <td>86</td>\n",
       "      <td>15400.000000</td>\n",
       "      <td>2</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86</th>\n",
       "      <td>87</td>\n",
       "      <td>15400.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>88</td>\n",
       "      <td>15400.000000</td>\n",
       "      <td>6</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>5.0</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>88</th>\n",
       "      <td>89</td>\n",
       "      <td>15400.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89</th>\n",
       "      <td>90</td>\n",
       "      <td>3681.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>90 rows × 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    FlightNumber   PayloadMass  Flights  GridFins  Reused   Legs  Block  \\\n",
       "0              1   6104.959412        1     False   False  False    1.0   \n",
       "1              2    525.000000        1     False   False  False    1.0   \n",
       "2              3    677.000000        1     False   False  False    1.0   \n",
       "3              4    500.000000        1     False   False  False    1.0   \n",
       "4              5   3170.000000        1     False   False  False    1.0   \n",
       "..           ...           ...      ...       ...     ...    ...    ...   \n",
       "85            86  15400.000000        2      True    True   True    5.0   \n",
       "86            87  15400.000000        3      True    True   True    5.0   \n",
       "87            88  15400.000000        6      True    True   True    5.0   \n",
       "88            89  15400.000000        3      True    True   True    5.0   \n",
       "89            90   3681.000000        1      True   False   True    5.0   \n",
       "\n",
       "    ReusedCount  Orbit_ES-L1  Orbit_GEO  ...  Serial_B1048  Serial_B1049  \\\n",
       "0             0            0          0  ...             0             0   \n",
       "1             0            0          0  ...             0             0   \n",
       "2             0            0          0  ...             0             0   \n",
       "3             0            0          0  ...             0             0   \n",
       "4             0            0          0  ...             0             0   \n",
       "..          ...          ...        ...  ...           ...           ...   \n",
       "85            2            0          0  ...             0             0   \n",
       "86            2            0          0  ...             0             0   \n",
       "87            5            0          0  ...             0             0   \n",
       "88            2            0          0  ...             0             0   \n",
       "89            0            0          0  ...             0             0   \n",
       "\n",
       "    Serial_B1050  Serial_B1051  Serial_B1054  Serial_B1056  Serial_B1058  \\\n",
       "0              0             0             0             0             0   \n",
       "1              0             0             0             0             0   \n",
       "2              0             0             0             0             0   \n",
       "3              0             0             0             0             0   \n",
       "4              0             0             0             0             0   \n",
       "..           ...           ...           ...           ...           ...   \n",
       "85             0             0             0             0             0   \n",
       "86             0             0             0             0             1   \n",
       "87             0             1             0             0             0   \n",
       "88             0             0             0             0             0   \n",
       "89             0             0             0             0             0   \n",
       "\n",
       "    Serial_B1059  Serial_B1060  Serial_B1062  \n",
       "0              0             0             0  \n",
       "1              0             0             0  \n",
       "2              0             0             0  \n",
       "3              0             0             0  \n",
       "4              0             0             0  \n",
       "..           ...           ...           ...  \n",
       "85             0             1             0  \n",
       "86             0             0             0  \n",
       "87             0             0             0  \n",
       "88             0             1             0  \n",
       "89             0             0             1  \n",
       "\n",
       "[90 rows x 80 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# HINT: Use get_dummies() function on the categorical columns\n",
    "features_one_hot = pd.get_dummies(features, columns=[\"Orbit\",\"LaunchSite\",\"LandingPad\",\"Serial\"])\n",
    "features_one_hot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TASK  8: Cast all numeric columns to `float64`\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that our <code>features_one_hot</code> dataframe only contains numbers cast the entire dataframe to variable type <code>float64</code>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FlightNumber</th>\n",
       "      <th>PayloadMass</th>\n",
       "      <th>Flights</th>\n",
       "      <th>GridFins</th>\n",
       "      <th>Reused</th>\n",
       "      <th>Legs</th>\n",
       "      <th>Block</th>\n",
       "      <th>ReusedCount</th>\n",
       "      <th>Orbit_ES-L1</th>\n",
       "      <th>Orbit_GEO</th>\n",
       "      <th>...</th>\n",
       "      <th>Serial_B1048</th>\n",
       "      <th>Serial_B1049</th>\n",
       "      <th>Serial_B1050</th>\n",
       "      <th>Serial_B1051</th>\n",
       "      <th>Serial_B1054</th>\n",
       "      <th>Serial_B1056</th>\n",
       "      <th>Serial_B1058</th>\n",
       "      <th>Serial_B1059</th>\n",
       "      <th>Serial_B1060</th>\n",
       "      <th>Serial_B1062</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>6104.959412</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>525.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>677.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>500.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3170.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   FlightNumber  PayloadMass  Flights  GridFins  Reused  Legs  Block  \\\n",
       "0           1.0  6104.959412      1.0       0.0     0.0   0.0    1.0   \n",
       "1           2.0   525.000000      1.0       0.0     0.0   0.0    1.0   \n",
       "2           3.0   677.000000      1.0       0.0     0.0   0.0    1.0   \n",
       "3           4.0   500.000000      1.0       0.0     0.0   0.0    1.0   \n",
       "4           5.0  3170.000000      1.0       0.0     0.0   0.0    1.0   \n",
       "\n",
       "   ReusedCount  Orbit_ES-L1  Orbit_GEO  ...  Serial_B1048  Serial_B1049  \\\n",
       "0          0.0          0.0        0.0  ...           0.0           0.0   \n",
       "1          0.0          0.0        0.0  ...           0.0           0.0   \n",
       "2          0.0          0.0        0.0  ...           0.0           0.0   \n",
       "3          0.0          0.0        0.0  ...           0.0           0.0   \n",
       "4          0.0          0.0        0.0  ...           0.0           0.0   \n",
       "\n",
       "   Serial_B1050  Serial_B1051  Serial_B1054  Serial_B1056  Serial_B1058  \\\n",
       "0           0.0           0.0           0.0           0.0           0.0   \n",
       "1           0.0           0.0           0.0           0.0           0.0   \n",
       "2           0.0           0.0           0.0           0.0           0.0   \n",
       "3           0.0           0.0           0.0           0.0           0.0   \n",
       "4           0.0           0.0           0.0           0.0           0.0   \n",
       "\n",
       "   Serial_B1059  Serial_B1060  Serial_B1062  \n",
       "0           0.0           0.0           0.0  \n",
       "1           0.0           0.0           0.0  \n",
       "2           0.0           0.0           0.0  \n",
       "3           0.0           0.0           0.0  \n",
       "4           0.0           0.0           0.0  \n",
       "\n",
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# HINT: use astype function\n",
    "features_one_hot=features_one_hot.astype(\"float64\")\n",
    "features_one_hot.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now export it to a <b>CSV</b> for the next section,but to make the answers consistent, in the next lab we will provide data in a pre-selected date range.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<code>features_one_hot.to_csv('dataset_part\\_3.csv', index=False)</code>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Authors\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDS0321ENSkillsNetwork26802033-2022-01-01\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"https://www.linkedin.com/in/nayefaboutayoun/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDS0321ENSkillsNetwork26802033-2022-01-01\">Nayef Abou Tayoun</a> is a Data Scientist at IBM and pursuing a Master of Management in Artificial intelligence degree at Queen's University.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Change Log\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Date (YYYY-MM-DD) | Version | Changed By    | Change Description      |\n",
    "| ----------------- | ------- | ------------- | ----------------------- |\n",
    "| 2021-10-12        | 1.1     | Lakshmi Holla | Modified markdown       |\n",
    "| 2020-09-20        | 1.0     | Joseph        | Modified Multiple Areas |\n",
    "| 2020-11-10        | 1.1     | Nayef         | updating the input data |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Copyright © 2020 IBM Corporation. All rights reserved.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
